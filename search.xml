<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>two pass linker</title>
      <link href="/two-pass-linker.html"/>
      <url>/two-pass-linker.html</url>
      
        <content type="html"><![CDATA[<hr><p>代写完成–链接器 two pass linker</p><hr><p>The target machine is word addressable and has a memory of 200 words, each consisting of 4 decimal digits. The first (leftmost) digit is the opcode, which is unchanged by the linker. The remaining three digits (called the address field) form either:</p><ul><li>an absolute address, which is unchanged. </li><li>an immediate operand, which is unchanged. </li><li>a relative address, which is relocated. </li><li>an external address, which is resolved.<br>Relocating relative addresses and resolving external references were discussed in class and are in the notes.</li></ul><a id="more"></a><p>The input consists of a series of object modules, each of which contains three parts: definition list, use list, and program text. Preceding all the object modules is a single integer giving the number of modules present.</p><p>The linker processes the input twice (that is why it is called two-pass). Pass one determines the base address for each module and the absolute address for each external symbol, storing the later in the symbol table it produces. The first module has base address zero; the base address for module I + 1 is equal to the base address of module I plus the length of module I. The absolute address for a symbol S defined in module M is the base address of M plus the relative address of S within M. Pass two uses the base addresses and the symbol table computed in pass one to generate the actual output by relocating relative addresses and resolving external references.<br>The definition list is a count ND (Number of Definitions) followed by ND pairs (S, R) where S is the symbol being defined and R is the relative address to which the symbol refers. Pass one relocates R forming the absolute address A and stores the pair (S, A) in the symbol table.</p><p>The use list is a count NU (Number of Uses) followed by NU pairs (S, R), where S is an external symbol used in the module and R is a relative address where S is used. The (dummy) address initially in R is a pointer to the next use of S. This linked list of uses ends with a pointer of 777.</p><p>The program text consists of a count NT (Number of Text entries) followed by NT pairs (type, word), where word is a 4-digit instruction as described above and the type of the address component: 1=immediate, 2=absolute, 3=relative, and 4=external. NT is also the length of the module.</p><h5 id="Other-requirements"><a href="#Other-requirements" class="headerlink" title="Other requirements"></a>Other requirements</h5><p>Your program must check the input for the errors listed below. All error messages produced must be informative, e.g., “Error: X21 was used but not defined. It has been given the value 111”.<br>1) if a symbol is defined but not used, print a warning message and continue.<br>2) if a symbol is multiply defined, print an error message and use the value given in the first definition.<br>3) if a symbol is used but not defined, print an error message and use the value zero.<br>4) if an address appearing in a definition exceeds the size of the module, print an error message and treat the address as 0 (relative).<br>5) if an immediate address (i.e., type 1) appears on a use list, print an error message and treat the address<br>as external (i.e., type 4).<br>6) if an external address is not on a use list, print an error message and treat it as an immediate address.<br>7) if an absolute address exceeds the size of the machine, print an error message and use the largest legal value.<br>You may need to set “arbitrary limits”, for example you may wish to limit the number of characters in a symbol to (say) 8. Any such limits should be clearly documented in the program and if the input fails to meet your limits, your program must print an error message. Naturally, any such limits must be large enough for all the inputs on the web. Under no circumstances should your program reference an array out of bounds, etc. </p><p>Your program must read an input set from standard input, i.e., directly from the keyboard. It is an error for you to require the input be in a file.</p><p><img src="/images/2019-09-23-13-24-35-089.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>biological family trees</title>
      <link href="/biological-family-trees.html"/>
      <url>/biological-family-trees.html</url>
      
        <content type="html"><![CDATA[<hr><p>代写完成–家族关系系统</p><hr><h4 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h4><p>This project deals with biological family trees. A family tree is defined in this project as a set of individuals who are “connected” to each other by genetic relationships. You will write a Java program to solve the problem of determining how people are related to each other.</p><a id="more"></a><h4 id="Problem-Background"><a href="#Problem-Background" class="headerlink" title="Problem Background"></a>Problem Background</h4><p>For this problem, you must design and write a Java program that will read an input stream that defines a family tree, and then answer questions about different specializations of “related” between people in the tree. There are two kinds of questions you will handle:</p><ul><li>A) “IS-A” Questions: These are “Yes/No” questions about whether two people &lt;A&gt; and &lt;B&gt; share the following relationships:<ol><li>Is &lt;A&gt; a child of&lt;B&gt; (order of names matters!) </li><li>Is &lt;A&gt; a sibling of&lt;B&gt;</li><li>Is &lt;A&gt; an ancestor of&lt;B&gt;</li><li>Is &lt;A&gt; a cousin of&lt;B&gt;</li><li>Is &lt;A&gt; unrelated to&lt;B&gt;</li></ol></li><li>B) “WHO-IS-A” Questions: “Who are all the people who are A’s &lt;relation&gt;?” &lt;Relation&gt; can be any of the relationships listed for “IS-A” Questions.<br>Another way of looking at a family tree is to view it as a directed graph. The nodes represent individuals, connected by edges (arrows) that represent the “offspring” relationship. An edge from one node to another means that the latter node is an offspring of the former node. In general, we can say one node (individual A) is an direct ancestor of another node (individual B) if and only if (iff) there is a backward sequence of one or more edges from node B back to node A.</li></ul><h5 id="Defining-the-general-concepts-of-“related”-and-“unrelated-”"><a href="#Defining-the-general-concepts-of-“related”-and-“unrelated-”" class="headerlink" title="Defining the general concepts of “related” and “unrelated:”"></a>Defining the general concepts of “related” and “unrelated:”</h5><p>Nodes in a family tree have at most two edges in (one for each biological parent), and an arbitrary number of edges out (one for each offspring). Two people are related if they share a common ancestor OR if one is a direct ancestor of the other. Thus, if two people have no common ancestor AND neither is the direct ancestor of the other, then they are unrelated.</p><h5 id="Defining-the-cousin-relationship"><a href="#Defining-the-cousin-relationship" class="headerlink" title="Defining the cousin relationship"></a>Defining the cousin relationship</h5><p>Another way of looking at the cousin relationship is that it is the same as the first part of the related definition: two people are cousins iff they share a common ancestor, (but neither is a direct ancestor of the other). Thus, a parent and a child are not considered cousins, nor would grandparents and their grandchildren be considered cousins. Note that siblings are actually 0th cousins by this definition! An interesting element here is the category of “first/second/third/etc- cousin, once/twice/thrice/etc. removed.” To begin with, suppose the following facts:<br>A and B are siblings, C is a child of A,<br>D is a child of B,</p><p>Then C and D are first cousins. Proceeding logically, if C has a child X and D has a child Y, then X and Y are second cousins. However, what is the relationship between C and Y? Why, C and Y are first cousins, once removed! For our purposes in the current project, we’ll just assume that C and Y are simply first cousins.</p><h5 id="Re-Marriages"><a href="#Re-Marriages" class="headerlink" title="Re-Marriages"></a>Re-Marriages</h5><p>A twist in this problem is that you’ll have to be careful of second, third, fourth, etc marriages – do not assume that a person can have at most one spouse. In the case of second marriages, technically the children from each spouse’s earlier marriage are NOT siblings, but new children produced after the marriage are (half-)siblings of the earlier marriages’ offspring. I n o u r project, however, we’ll have to recognize that there can be remarriages, BUT two people with only a single parent in common are still siblings.</p><h5 id="Problem-I-O-Specification"><a href="#Problem-I-O-Specification" class="headerlink" title="Problem I/O Specification"></a>Problem I/O Specification</h5><p>The family tree will be supplied to your program via standard in. This means you should be sure to open a BufferedReader or Scanner on the System.in stream. You should also be printing all output to System.out.</p><p>NOTE: You must NOT write the program so that it always looks at some hard- coded data file name or so that you have to supply the name as a command line argument.<br>You can assume that there will be no formatting errors to check for. Each line in the family tree will have the form<br>E &lt;name1&gt; &lt;name2&gt; or E &lt;name1&gt; &lt;name2&gt; &lt;name3&gt;<br>which has the meaning “&lt;name1&gt; and &lt;name2&gt; are married” or “the married parents &lt;name1&gt; and &lt;name2&gt; produced a child &lt;name3&gt;.” Note that marriage events and birth events are listed chronologically, and that not all marriages produce children. Names have no spaces in them and contain no hyphens.</p><p>The family tree file will also have query lines (possibly interspersed with event lines). These will have the form<br>QUERY Meaning<br>X &lt;name1&gt; &lt;relation&gt; &lt;name2&gt; Is &lt;name1&gt; the &lt;relation&gt; of &lt;name2&gt;?W &lt;relation&gt; &lt;name1&gt; List everyone who is the &lt;relation&gt; of &lt;name1&gt;.&lt;relation&gt; can be child, sibling, ancestor, cousin, or unrelated.<br>Whenever the program encounters a query, it must answer according to the knowledge so far collected as events in the input file. Note that &lt;relation&gt; for cousin will be the word “cousin” followed by a number indicating the type of cousin.</p><p>No output is required when the program encounters an event line. When a query line is encountered, the program must print out a blank line, then print the query, then on the next line print out the response. The response to “X” queries must be either “Yes” or “No.” The response to “W” queries must be all the names, one per line, that correctly answer the question. The names must be sorted in alphabetical order.</p><pre><code>Example I/O File Content:E John Mary BillE John Mary PeteE John Mary FredE John Jean RebeccaE Rebecca Bill Andrew E Pete Carol JimW child JohnX Bill sibling PeteX Bill sibling FredX John unrelated Mary W ancestor AndrewX Bill cousin MaryOutput:W child JohnBill Fred Pete RebeccaX Bill sibling Pete YesX Bill sibling Fred YesX John unrelated Mary YesW ancestor Andrew BillJeanJohnMary RebeccaX Bill cousin Mary No</code></pre><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><img src="/images/2019-09-23-12-15-13-723.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Deterministic Crowds Protocol</title>
      <link href="/the-deterministic-crowds-protocol.html"/>
      <url>/the-deterministic-crowds-protocol.html</url>
      
        <content type="html"><![CDATA[<hr><p>代写完成–Java 算法: 匿名通信算法</p><hr><h5 id="Network-Nodes"><a href="#Network-Nodes" class="headerlink" title="Network Nodes"></a>Network Nodes</h5><p>Following is a description adapted from Rass and Wigoutschnigg [2016]. For the purposes of sending a message, there are three kinds of nodes: the initiator, intermediate forwarding nodes, and the receiver. The N nodes of a network will be identiﬁed by integers <code>0, 1, 2, 3 . . . N − 1</code>. </p><p>The protocol is, however, still vulnerable to attack by a local eavesdropper (an attacker that can observe all incoming and outgoing messages for any proper subset of the nodes) or an attack known as the predecessor attack.</p><a id="more"></a><p>Initiator We will call the initiating node $v_0$ . There will be a function $f : N → N$, taking a non-negative integer and producing non-negative integer, that a node will use to decide which node it will send a message to. (Notationally, $f^{−1}$ will be the inverse of this function.)</p><p>To transmit a message m to a receiver v, $v_0$ ﬁrst chooses a path length n and calls $v_n := v$ the receiver. It then goes on to choose a value $r_n ≡ v_n  mod  N$, and backward iterates $r_{n−1} = f^{−1} (r_n)$ until it reaches a value $r_1$ . The ﬁrst node to transmit the payload to (where the payload consists of the message m, value r and function f) is thus $v_1 = r_1 mod N$, and the initiator acts just as if it would have if it had computed $r_1$ from the data being sent from elsewhere to $v_0$ .</p><p>Question: If there is such a function $f^{−1}$ , how can the protocol prevent any node from tracking the message back? The solution is for f to be a trapdoor function, one whose inverse can only (easily) be calculated by using a trapdoor secret. §2.2 explains these and gives an example of how it is applied here.</p><p>Forwarding Node Forwarding node $v_i$ , upon receiving the message m, along with a value $r_i$ and a function f, ﬁrst checks if it is the designated receiver. As it is not, it computes $r_{i+1} = f(r_i)$ and thence the next hop as $v_{i+1} = r_{i+1} mod N$, and sends the message m together with $r_{i+1}$ and f to $v_{i+1}$ .</p><p>Receiver Node $v_n$ similarly checks if it is the designated receiver. As it is, the process stops.</p><p>2.2 Trapdoor Functions</p><p>An Example of a Trapdoor Function Trapdoor functions are used widely in cryptography. The kind of function we’ll be using comes from RSA encryption. 5 There are three values that we’ll be using to deﬁne our function f and its inverse $f^{−1}$ ; we’ll call these e, d and K. e and K will be used to deﬁne f, which will be public; d will be the trapdoor secret.</p><p>Our public function will be</p><p>$$f(x) = x^e mod K  (1)$$</p><p>and our inverting function will be</p><p>$$g(x) = x^d mod K (2)$$</p><p>There is a process (in cryptography, a key generation algorithm) to ﬁnd values of e, d, K such that $f(g(x)) = x$, i.e. $g(x) = f^{−1} (x)$.</p><p>Consider e = 3, d = 7, K = 33. Then, $f(30) = 30^3 mod 33 = 6$. To compute the inverse, $f^{−1} (6) = g(6) = 6^7 mod 33 = 30$. This inverse can only (easily) be computed if d is known.</p><p>Applying a Trapdoor to Deterministic Crowds Consider a network (crowd) with nodes 0 . . . 19. Let the message initiator be node $v_0 = 1$. $v_0$ decides on a path length of n = 3 (i.e. via two intermediate forwarding nodes) to send its message to receiver node $v = v_3 = 6$. It makes the following calculations:</p><p>$1. r_3 = 6.$</p><p>$2. r_2 = f^{−1} (6) = 6^7 mod 33 = 30.$</p><p>This corresponds to node $v_2 = r_2 mod N = 30 mod 20 = 10$.</p><p>$3. r_1 = f^{−1} (30) = 30^7 mod 33 = 24.$</p><p>This corresponds to node $v_1 = r_1 mod N = 24 mod 20 = 4$.</p><p>So the node that $v_0$ forwards the message to, along with the value $r_1 = 24$ and function f (but not $f^{−1}$ or the value d that would allow $f^{−1}$ to be calculated), is node 4.The full path will be 1 → 4 → 10 → 6.</p><h5 id="Assignment-Code-Structure"><a href="#Assignment-Code-Structure" class="headerlink" title="Assignment Code Structure"></a>Assignment Code Structure</h5><p>You will be working with a Java project that has 4 classes:</p><ul><li><p>NodeTransitionFunction: This instantiates the functions f(·) and g(·) from Equations (1) and (2) respectively.</p></li><li><p>Node: This represents a node in the network; it is where the core functionality of the assignment is. Nodes receive messages, determine the next one to forward them to, and carry out the forwarding, among other functions. A node will have an integer ID 0 . . . N − 1, where N is the number of nodes a particular network.</p></li><li><p>Network: This represents a network of nodes. The key component of the network is a lookup table that is accessible to all nodes, so that nodes can look up properties of other nodes. The table has the form<br><code>Map&lt;Integer,Node&gt; lookup;</code><br>It also contains functions that will be provided for reading network speciﬁcations and messages from ﬁles.</p></li><li><p>MessageTrackCheck: This represents an encoded trail of which nodes were visited in the process of passing messages. (It is mostly just used in the JUnit tests.)</p></li></ul><p>For your tasks, you’ll be adding attributes and methods to existing classes given in the code bundle accompanying these specs. Where it’s given, you should use exactly the method stub provided for implementing your tasks. Don’t change the names or the parameters or exception handling. You can add more functions if you like.</p><h5 id="Pass-Level"><a href="#Pass-Level" class="headerlink" title="Pass Level"></a>Pass Level</h5><p>To achieve at least a Pass (≥ 50%) for the assignment, you should do all of the following.</p><p>There will be some sample input ﬁles to be used in the JUnit tests in the code bundle. The sample input nodedef1.in consists of 20 nodes, each with associated trapdoor function parameters e = 3, d = 7, K = 33. Obviously in a real network nodes would have diﬀerent parameter values, and in later input ﬁles they will; it just happens that this triple is the smallest one that works for this kind of trapdoor function, and so the easiest to handle numerically when getting started.</p><p>There will be no public Node method to ﬁnd out which node sent a message to the current node. (If there was, there would be no anonymity. However, we will change this slightly for corrupt nodes in the Distinction level tasks.) On the other hand, we want some way of recording which nodes were visited.</p><p>The MessageTrackCheck class acts a like a parity check, and works as follows. A MessageTrackCheck instance t will sum the IDs of each node that is involved in passing a message, including the initiator and receiver; it will also add a speciﬁed oﬀset. It will then internally calculate the sum mod 26, and make available the corresponding check character from the lower-case alphabet a . . . z, assuming they are indexed by the values 0 . . . 25 respectively.</p><p>So if a message track check has an oﬀset of 3, and a message is passed along a path of nodes 1 → 4 → 10 → 6, the check character would be the character corresponding to (3 + 1 + 4 + 10 + 6) mod 26 = 24, which is y.</p><p>Write the following methods for class MessageTrackCheck.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">MessageTrackCheck</span><span class="token punctuation">(</span>Integer offset<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// CONSTRUCTOR: Argument is offset to initialise the running sum </span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>Integer n<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// PRE: </span>    <span class="token comment" spellcheck="true">// POST: Adds n to the running sum </span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">char</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// PRE: </span>    <span class="token comment" spellcheck="true">// POST: Returns the character that corresponds to the running sum mod 26; </span>    <span class="token comment" spellcheck="true">// 0..25 correspond to a..z </span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reset</span><span class="token punctuation">(</span>Integer offset<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// PRE: </span>    <span class="token comment" spellcheck="true">// POST: Re-initialises the running sum to the given offset </span><span class="token punctuation">}</span></code></pre><p>Write the following methods for the NodeTransitionFunction class.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">NodeTransitionFunction</span><span class="token punctuation">(</span>Integer exp<span class="token punctuation">,</span> Integer KVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// CONSTUCTOR: Sets the class to calculate f(x) = (x ^ exp) mod KVal </span><span class="token punctuation">}</span><span class="token keyword">public</span> Integer <span class="token function">apply</span><span class="token punctuation">(</span>Integer val<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// PRE: </span>    <span class="token comment" spellcheck="true">// POST: Implements f(val) </span><span class="token punctuation">}</span></code></pre><p>Note that if you implement apply() in a straightforward way, you will almost certainly exceed Java’s Integer.MAX_VALUE: try it for yourself with an instance of NodeTransitionFunction instantiated with values 3 and 33, comparing it against the value obtained from e.g. a spreadsheet.</p><p>Instead, there is a useful identity that lets you make the calculation without this risk:</p><p>$$(ab) mod p = ((a mod p)(b mod p)) mod p$$</p><p>Implement apply() using this identity. </p><p>Implement a constructor for class Node with the following signature:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span>Integer n<span class="token punctuation">,</span> Integer e<span class="token punctuation">,</span> Integer d<span class="token punctuation">,</span> Integer K<span class="token punctuation">,</span> Boolean encrypt<span class="token punctuation">,</span> Boolean useBI<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>Node<span class="token operator">></span> m<span class="token punctuation">,</span> MessageTrackCheck t<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// CONSTUCTOR:</span>    <span class="token comment" spellcheck="true">// n is node ID, </span>    <span class="token comment" spellcheck="true">// e is the exponent for the function f() </span>    <span class="token comment" spellcheck="true">// d is the exponent for the function g() </span>    <span class="token comment" spellcheck="true">// K is the divisor in f() and g() </span>    <span class="token comment" spellcheck="true">// encrypt is true if messages are encrypted, false otherwise </span>    <span class="token comment" spellcheck="true">// useBI is true if BigInteger should be used for NodeTransitionFunction, false otherwise </span>    <span class="token comment" spellcheck="true">// m is a non-null map of node IDs to node objects </span>    <span class="token comment" spellcheck="true">// t is an instance of MessageTrackCheck </span><span class="token punctuation">}</span></code></pre><p>For the Pass level, encrypt and useBI will be set to false. The parameters e, d and K here correspond to the e, d, K from §2.2.</p><p>This task and those below all involve adding to class Node.</p><p>For the Pass level, when a message is passed through the network it will have appended to the end a 3-character string that indicates the destination; we will call this combination of the original message and destination the augmented message. A node will therefore know that it is the destination for a message from the ﬁnal three characters of the augmented message. An augmented message that has the value hello006 is thus destined for node 6.</p><p>Implement the following method in class Node:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Boolean <span class="token function">isDestinationNode</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// PRE: msg is an augmented message (i.e. containing 3 characters at the end </span>    <span class="token comment" spellcheck="true">// indicating destination node) </span>    <span class="token comment" spellcheck="true">// POST: Returns true if this is the destination node, false otherwise </span>    <span class="token comment" spellcheck="true">// E.g. For node 6, will return true for "hello006" </span><span class="token punctuation">}</span></code></pre><p>There are several getter methods for class Node:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Integer <span class="token function">getID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// PRE: </span>    <span class="token comment" spellcheck="true">// POST: Returns node ID </span><span class="token punctuation">}</span><span class="token keyword">public</span> Integer <span class="token function">getE</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// PRE: </span>    <span class="token comment" spellcheck="true">// POST: Returns value of e in this node’s function f() </span><span class="token punctuation">}</span><span class="token keyword">public</span> Integer <span class="token function">getK</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// PRE: </span>    <span class="token comment" spellcheck="true">// POST: Returns value of K in this node’s function f() </span><span class="token punctuation">}</span><span class="token keyword">public</span> Boolean <span class="token function">transmittedMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// PRE: </span>    <span class="token comment" spellcheck="true">// POST: Returns true if this node has transmitted a message, false otherwise </span><span class="token punctuation">}</span><span class="token keyword">public</span> String <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// PRE: </span>    <span class="token comment" spellcheck="true">// POST: Returns the current received (non-augmented) message, null if no received message </span><span class="token punctuation">}</span></code></pre><p>A node will have its own NodeTransitionFunction that corresponds to function f(·) as deﬁned by its own parameters e, K.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> NodeTransitionFunction <span class="token function">createForwardNodeTransitionFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// PRE: </span>    <span class="token comment" spellcheck="true">// POST: Creates a NodeTransitionFunction using this node’s public function f() </span>    <span class="token comment" spellcheck="true">// with parameters e, K </span><span class="token punctuation">}</span></code></pre><p>All nodes have the core functionality of receiving and sending messages. For a node at step i in a path of length n, in sending a message it passes along the payload consisting of the (augmented) message, the value r i , and the node transition function representing a particular f(·) that the next node will use. In our example from §2.2, for the node 1 at the ﬁrst step in the path, it will be sending to node 4, the value of r is 24, and the node transition function is f(·) with e = 3, K = 33.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMsgToNode</span><span class="token punctuation">(</span>Node n<span class="token punctuation">,</span> String msg<span class="token punctuation">,</span> Integer r<span class="token punctuation">,</span> NodeTransitionFunction f<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// PRE: n is a non-null node, </span>    <span class="token comment" spellcheck="true">// msg is an (augmented) message, </span>    <span class="token comment" spellcheck="true">// r is the current value of r from the forward transition function.</span>    <span class="token comment" spellcheck="true">// f is the forward transition function </span>    <span class="token comment" spellcheck="true">// POST: invokes receiveMsgFromNode on node n </span><span class="token punctuation">}</span></code></pre><p>The following method speciﬁes what happens when a node receives a message. Continuing the example, when node 4 receives the message from node 1, say the augmented message is hello006: node 4 is then not the destination. So it takes the value r = 24 and calculates the next node to forward the message to, f(24).</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveMsgFromNode</span><span class="token punctuation">(</span>String msg<span class="token punctuation">,</span> Integer id<span class="token punctuation">,</span> Integer r<span class="token punctuation">,</span> NodeTransitionFunction f<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// PRE: msg is an augmented message, </span>    <span class="token comment" spellcheck="true">// id is the ID of the sending node, </span>    <span class="token comment" spellcheck="true">// r is the current value of r from the forward transition function, </span>    <span class="token comment" spellcheck="true">// f is the forward transition function </span>    <span class="token comment" spellcheck="true">// POST: If this is the destination node, stop; </span>    <span class="token comment" spellcheck="true">// otherwise, send the message onwards.</span>    <span class="token comment" spellcheck="true">// Add ID of current (receiving) node to local MessageTrackCheck </span><span class="token punctuation">}</span></code></pre><p>An initiator has some additional functionality. First, there is a method to construct an augmented message from the original message:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">addDestIDToMsg</span><span class="token punctuation">(</span>String msg<span class="token punctuation">,</span> Integer v<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// PRE: msg is a message, v is a node ID </span>    <span class="token comment" spellcheck="true">// POST: Returns a string that concatenates v as a 3-character string to the end of msg. </span>    <span class="token comment" spellcheck="true">// E.g. for msg="hello", v=6, returns "hello006" </span><span class="token punctuation">}</span></code></pre><p>Then, it has to calculate the value r 1 to determine which the ﬁrst node is to send the message to, as described in §2.2.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Integer <span class="token function">firstRForInitiatingMessage</span><span class="token punctuation">(</span>Integer k<span class="token punctuation">,</span> Integer v<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// PRE: v is destination node ID, k is number of steps </span>    <span class="token comment" spellcheck="true">// POST: Uses the trapdoor function inverse, applied to destination node v with number of steps k, </span>    <span class="token comment" spellcheck="true">// to calculate the node path; </span>    <span class="token comment" spellcheck="true">// returns value of r that determines first step on node path </span><span class="token punctuation">}</span></code></pre><p>Then, it has to initiate the sending of the message; this involves creating the function f(·) using its own parameters e, K that can be passed along to later nodes in the path.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initiateMessage</span><span class="token punctuation">(</span>String msg<span class="token punctuation">,</span> Integer k<span class="token punctuation">,</span> Integer v<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// PRE: msg is an original message, v is destination node ID, k is number of steps </span>    <span class="token comment" spellcheck="true">// POST: Adds destination ID to msg; </span>    <span class="token comment" spellcheck="true">// sends augmented msg to the next node, as determined by firstRForInitiatingMessage(k, v), </span>    <span class="token comment" spellcheck="true">// along with new forward transition function </span><span class="token punctuation">}</span></code></pre><h5 id="Credit-Level"><a href="#Credit-Level" class="headerlink" title="Credit Level"></a>Credit Level</h5><p>To achieve at least a Credit (≥ 65%) for the assignment, you should do the following. completed all the Pass-level tasks.</p><p>You should also have </p><p>For Credit-level tasks and above, it will be up to you to discover how some more advanced Java features work. It will be OK to ask questions, but you’ll be expected to read Java documentation yourself ﬁrst.</p><p>In the Credit-level tasks, you’ll be using Java’s BigInteger 9 for calculations of f(·) and g(·). This class has been speciﬁcally designed for dealing with problems like the Integer.MAX_VALUE one noted in the Pass-level tasks.</p><p>In class NodeTransitionFunction, add a new method apply() that takes its argument as a BigInteger rather than an Integer.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> BigInteger <span class="token function">apply</span><span class="token punctuation">(</span>BigInteger val<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// PRE: </span>    <span class="token comment" spellcheck="true">// POST: Implements f(val), with val as a BigInteger </span><span class="token punctuation">}</span></code></pre><p>You can, and should, still keep your earlier apply() method. From Java’s point of view, the type signatures of these methods are diﬀerent, and it will know which one to invoke by the argument.</p><p>Add the following methods to class Node that duplicate several methods from the Pass-level tasks but that use BigInteger rather than Integer.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMsgToNode</span><span class="token punctuation">(</span>Node n<span class="token punctuation">,</span> String msg<span class="token punctuation">,</span> BigInteger r<span class="token punctuation">,</span> NodeTransitionFunction f<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// PRE: n is a non-null node, </span>    <span class="token comment" spellcheck="true">// msg is an augmented message, </span>    <span class="token comment" spellcheck="true">// r is the current value of r from the forward transition function.</span>    <span class="token comment" spellcheck="true">// f is the forward transition function </span>    <span class="token comment" spellcheck="true">// POST: invokes receiveMsgFromNode on node n </span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveMsgFromNode</span><span class="token punctuation">(</span>String msg<span class="token punctuation">,</span> Integer id<span class="token punctuation">,</span> BigInteger r<span class="token punctuation">,</span> NodeTransitionFunction f<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// PRE: msg is an augmented message, </span>    <span class="token comment" spellcheck="true">// id is the ID of the sending node, </span>    <span class="token comment" spellcheck="true">// r is the current value of r from the forward transition function.</span>    <span class="token comment" spellcheck="true">// f is the forward transition function </span>    <span class="token comment" spellcheck="true">// POST: If this is the destination node, stop; </span>    <span class="token comment" spellcheck="true">// otherwise, send the message onwards.</span>    <span class="token comment" spellcheck="true">// Add ID of current (receiving) node to local MessageTrackCheck </span><span class="token punctuation">}</span><span class="token keyword">public</span> BigInteger <span class="token function">firstRForInitiatingMessage</span><span class="token punctuation">(</span>Integer k<span class="token punctuation">,</span> BigInteger v<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// PRE: v is destination node ID, k is number of steps as a BigInteger </span>    <span class="token comment" spellcheck="true">// POST: Uses the trapdoor function inverse, applied to destination node v with number of steps k, </span>    <span class="token comment" spellcheck="true">// to calculate the node path; </span>    <span class="token comment" spellcheck="true">// returns value of r that determines first step on node path </span><span class="token punctuation">}</span></code></pre><p>Note that you’ll also want to change the internals of initiateMessage(), depending on whether useBI is set to true or false in the node constructor.</p><h5 id="High-Distinction-Level"><a href="#High-Distinction-Level" class="headerlink" title="(High) Distinction Level"></a>(High) Distinction Level</h5><p>To achieve at least a Distinction (75−100%) for the assignment, you should do the following. You should also have completed all the Credit-level tasks.</p><p>There are two aspects to these advanced level tasks.</p><p>Corrupt Nodes The ﬁrst is implementing a simpliﬁed version of how a corrupt node might try to guess an initiator. For this, a corrupt node will assume that there is only one initiator in the network. A corrupt node forwards and receives messages just like any other node, but keeps track of which node sent it a message. Further, a corrupt node $v_{c 1}$ can ﬁnd out from another corrupt node $v_{c2}$ which node $v_p$ most recently sent $v_{c2}$ a message; that node $v_p$ could likewise be corrupt, and $v_{c1}$ could then query $v_p$ as well.</p><p>We will stipulate that a corrupt node $v_{c1}$ guesses another node $v_g$ to be a message initiator if it discovers that $v_g$ has transmitted messages that have reached $v_{c1}$ along two diﬀerent paths. ($v_{c1}$ does not have to be the receiver; it may have just forwarded the message.)</p><p>Consider an example that extends from §2.2. We have the same network with nodes 0 . . . 19, and initiator node v 0 = 1. In this example, v 0 sends a ﬁrst message with path length 2 to node v 2 = 8; the path will be 1 → 2 → 8. 0 Then it sends a second message with path length 4 to node $v_4 = 7$; the path will be 1 → 13 → 19 → 8 → 7.</p><p>Assume that nodes 2, 8, 13 and 19 are corrupt. Node 8 can then guess that node $v_0 = 1$ is the initiator. If the set of nodes that are corrupt were instead {2, 8, 19}, it could not be guessed.</p><p>Write the following methods in class Node</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCorrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// PRE: </span>    <span class="token comment" spellcheck="true">// POST: Sets a node to be corrupt </span><span class="token punctuation">}</span><span class="token keyword">public</span> Integer <span class="token function">lastSender</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// PRE: </span>    <span class="token comment" spellcheck="true">// POST: If a node is not corrupt, returns -1; </span>    <span class="token comment" spellcheck="true">// if a node is corrupt, returns ID of node that last sent it a message, </span>    <span class="token comment" spellcheck="true">// -1 if it has not been sent any messages </span><span class="token punctuation">}</span><span class="token keyword">public</span> Integer <span class="token function">guessInitiator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// PRE: </span>    <span class="token comment" spellcheck="true">// POST: Guesses a node to be the initiator if it can track back through corrupted nodes </span>    <span class="token comment" spellcheck="true">// along two separate paths; </span>    <span class="token comment" spellcheck="true">// returns this node ID, or -1 if no guess </span><span class="token punctuation">}</span></code></pre><p>Encryption In the second part of the advanced level, you’ll be working with actual encrypted messages. Specifically, we will use ElGamal encryption 11 as speciﬁed in Rass and Wigoutschnigg [2016]. As with encryption in general, this involves a public key and a private key. When an initiator node v 0 wants to send a message to a receiver node v, it will use v’s public key to encrypt the message; then only v can decrypt it, using its private key.</p><p>Determining whether a node is the destination or not is thus diﬀerent from the earlier levels: there is no longer an augmented message of type String where the last 3 characters give the destination. Instead, we will implement it as described in Rass and Wigoutschnigg [2016]. First, the initiator uses a hash function on the original message, and then concatenates this hash value (which for us will be 3 characters long) to form an augmented message; it then encrypts this augmented message using the receiver’s public key. It sends this encrypted message as usual.</p><p>Each node along the path to the receiver tries to decrypt the encrypted message with its own private key. Treating the decryption as a String, it hashes the ﬁrst n − 3 characters and compares it to the last 3 characters of the decryption. If it is the correct private key, these will match; if it is not, the decryption will look like gobbledygook rather than a valid string, and the hashes will not match.</p><p>There are a number of sample programs you can ﬁnd on the Internet which use the same mechanisms we will use. 12 The cryptography libraries are part of javax.crypto.Cipher; to import this, you’ll have to add some external libraries (made available in iLearn) to the project. </p><p>You then need to implement the following methods in class Node</p><p>The following are some getter methods.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Boolean <span class="token function">hasMsgEncryption</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// PRE: </span>    <span class="token comment" spellcheck="true">// POST: Returns true if messages are encrypted, false otherwise </span><span class="token punctuation">}</span><span class="token keyword">public</span> Key <span class="token function">getPublicKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// PRE:</span>    <span class="token comment" spellcheck="true">// POST: Returns the node’s public key (null if hasMsgEncryption() is false) </span><span class="token punctuation">}</span></code></pre><p>Do this by right-clicking on your project in Eclipse and selecting Properties – Java Build Path – Libraries – Add External JARs.</p><p>The following methods are related to the new deﬁnition of augmented messages.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">basicHashFunction</span> <span class="token punctuation">(</span>String m<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// PRE: </span>    <span class="token comment" spellcheck="true">// POST: Sums the numeric value of each character using Character.getNumericValue(), </span>    <span class="token comment" spellcheck="true">// takes mod 100 of the total; returns as a 3-char string </span><span class="token punctuation">}</span></code></pre><p>An an example, the basic hash function when applied to string hello should return the string 097.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">addCheckToMsg</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// PRE: msg is a message </span>    <span class="token comment" spellcheck="true">// POST: Returns a string that concatenates the basicHashFunction of msg </span>    <span class="token comment" spellcheck="true">// E.g. for msg="hello", returns "hello097" </span><span class="token punctuation">}</span></code></pre><p>The following methods are the heart of the message encryption process.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">encryptedMsg</span><span class="token punctuation">(</span>String msg<span class="token punctuation">,</span> Key chosenPubKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// PRE: msg is a message, chosenPubKey is a public key </span>    <span class="token comment" spellcheck="true">// POST: Returns msg encrypted with chosenPubKey </span>    <span class="token comment" spellcheck="true">// (null if hasMsgEncryption() is false or chosenPubKey is null) </span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">decryptedMsg</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// PRE: msg is an encrypted message as a byte array </span>    <span class="token comment" spellcheck="true">// POST: Returns msg decrypted using node’s private key </span>    <span class="token comment" spellcheck="true">// (null if hasMsgEncryption() is false) </span><span class="token punctuation">}</span><span class="token keyword">public</span> Boolean <span class="token function">isDestinationNode</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// PRE: msg is an augmented encrypted message (i.e. containing 3 check digits at the end) </span>    <span class="token comment" spellcheck="true">// POST: Returns true if this is the destination node, false otherwise.</span>    <span class="token comment" spellcheck="true">// Determines if this is the destination by decrypting msg, // then comparing the hashed decrypted core msg (i.e. up to the last 3 //// characters) </span>    <span class="token comment" spellcheck="true">// against the last 3 chars of the decrypted msg </span><span class="token punctuation">}</span></code></pre><p>Note that to fully implement encrypted messages, you’d also have to deﬁne new functions sendMsgToNode() and recMsgFromNode() so that their message arguments were of type byte[] rather than String, and change the internals of several other functions. However, you don’t have to do this for the assignment. Only the above functions will be tested in the JUnit tests.</p>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sudoku</title>
      <link href="/sudoku.html"/>
      <url>/sudoku.html</url>
      
        <content type="html"><![CDATA[<hr><p>代写完成–Java GUI: 九宫格游戏</p><hr><h4 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h4><p>In this assignment, you are going to complete a logic-based game called Sudoku. For more details regarding this game, you may check its Wikipedia page here.<br>There are 2 parts in this assignment: Part A and Part B. Implement ALL routines in part A and in part B.</p><a id="more"></a><h4 id="Fundamentals"><a href="#Fundamentals" class="headerlink" title="Fundamentals"></a>Fundamentals</h4><p><img src="/images/2019-05-31-21-02-28-911.png" alt><br>A typical Sudoku puzzle has a 9x9 board. The goal of Sudoku is simple: fill in the numbers 1-9 exactly once in every row, column, and 3x3 region. It is common to use pencil-mark to plot in possible numbers in each cell. The image below shows the pencil-mark, indicated by the small numbers in blue color. Your completed program should be able to provide the correct pencil-mark to the user.</p><p><img src="/images/2019-05-31-21-02-49-263.png" alt><br>In addition, your completed program will be able to solve a Sudoku puzzle by clicking the “Solution” button. The following shows the solution of the above puzzle:<br><img src="/images/2019-05-31-21-03-04-788.png" alt><br>Your completed program will shade the box in grey color if the user input has no conflict. For example, if the user changed the input in box “H-VI” to 8, the corresponding conflicted row, column, and subregion will be unshaded as shown below.<br><img src="/images/2019-05-31-21-03-20-416.png" alt>  </p><h4 id="Description-Part-A"><a href="#Description-Part-A" class="headerlink" title="Description: Part A"></a>Description: Part A</h4><ul><li><p>Subset Class<br>Open Subset.java and complete the followings of Subset class:<br>Complete the method isValid(). This method will return a boolean of true if the subset contains 1-9 exactly once. For example, if the subset contains [2,3,6,9,7,1,8,4,5], then isValid() should return true. And it will return false if some numbers are missing or repeated. Complete the method markings(). This method will return a boolean array of size 10, say a, where a[i] is true if the subset didn’t contain i.<br>For example, if the subset contains [0,0,6,5,8,0,7,0,9], then we should return a=[F,T,T,T,T,F,F,F,F,F]. If the subset contains [1,2,3,4,5,6,7,8,9], then this method will return a=[T,F,F,F,F,F,F,F,F,F].<br>Complete the method conflict(int n). This method will return true if the subset contains input n.<br>Hint: you may want to use the method getValue() to obtain the value in cell.<br>Row Class, Column Class, and Subregion Class</p></li><li><p>After completing Subset.java, there are three methods to check the validity, markings, and conflicts for a subset of size 9. The game of Sudoku requires these conditions to be checked in row, column, and subregion. So we are going to extract it and put it into the subset for checking. Note that the following classes are inherited from the Subset class.</p></li><li><p>Open Row.java. The constructor of Row class will initialize the variable c, where c is an array of cells of size 9 initialized in subset. This variable c should contain the cells of the given row from the matrix.</p></li><li><p>Open Column.java. Similarly, the constructor of Column class will initialize the variable c. This variable c should contain the cells of the given column from the matrix.</p></li><li><p>Open Subregion.java. Again, the constructor of Subregion class will initialize the variable c. This variable c contains the cells of the given subregion from the matrix.<br>Hint: you may want to use the method setRow(), setColumn(), and setSubregion() of Cell class for this part.</p></li><li><p>Cell Class<br>Open Cell.java and complete the following methods of Cell class.<br>Complete the method getPencilMarking(). This method will return a boolean array pencilMarking, where pencilMarking[i] is true if all corresponding row, column, and subregion didn’t contain i.<br>Hint: Use the method markings() that you completed in Subset.java for this.<br>Complete the method conflict(). This method will return true if the input value i conflicts with its row, column, or subregion.<br>Hint: Use the OR operator.</p></li><li><p>Board<br>Open Board.java and complete the following methods of Board class.<br>Complete the methods solve() and solve(int k). These two methods are used to solve a Sudoku puzzle. Solving a Sudoku puzzle is quite complicated. You can write your code according to the pseudocode provided in the Appendix.<br>Complete the method generate(). This method generates a random Sudoku puzzle. Again, we provided the pseudocode for you in the Appendix.</p></li></ul><p>After finishing part A, you can try to build and run main(). The output should look like this:<br><img src="/images/2019-05-31-21-04-00-600.png" alt><br>Note that the program generates a random Sudoku puzzle every time, so your output should look a bit different from the above.</p><p>Also, you need to open interfce.java and disable the import/export button if you want to run it before finishing Part B. Otherwise, you will have an error because your IO.java is incomplete.</p><p>If your implementation is correct, you should be able to use Generate, Solution, and PencilMarkings. Also, the conflict checking function should work (see Introduction).</p><h4 id="Description-Part-B"><a href="#Description-Part-B" class="headerlink" title="Description: Part B"></a>Description: Part B</h4><h5 id="File-output"><a href="#File-output" class="headerlink" title="File output"></a>File output</h5><p>Open IO.java. Complete the method for file output. After you have completed this method, your program should be able to perform Export. For example, the following shows an unfinished Sudoku puzzle:<br><img src="/images/2019-05-31-21-04-28-976.png" alt><br>By clicking the Export button, the following window will show up:<br><img src="/images/2019-05-31-21-04-46-953.png" alt><br>which allow the user to save the puzzle.<br>There are three parts in the puzzle that you need to save: value, solution, and the given puzzle.</p><ul><li><p>Value: the current value stored in a cell, can be user input or original puzzle generated by the program.</p></li><li><p>Solution: the solution to this puzzle.</p></li><li><p>Given: a boolean that describes whether the cell value is generated by the algorithm.</p></li></ul><p>Hint: You may need to use these methods: getBoard(), getValue(), getSolution(), and getGiven(). Note: You can store the puzzle in any way you want as long as you can load it back to the program.</p><h5 id="File-input"><a href="#File-input" class="headerlink" title="File input"></a>File input</h5><p>Open IO.java. Complete the method for file input. After you have completed this method, your program should be able to perform Import to input a previously saved puzzle. For example, here is a new puzzle after the Generate button is clicked.<br><img src="/images/2019-05-31-21-05-10-890.png" alt><br>You can click the Import button and the following window will pop up.<br><img src="/images/2019-05-31-21-05-24-418.png" alt><br>Select and open the file “123.data”. Then, the user can continue to play this previously saved puzzle.<br><img src="/images/2019-05-31-21-05-38-525.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> GUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Guess Word Game</title>
      <link href="/guess-word-game.html"/>
      <url>/guess-word-game.html</url>
      
        <content type="html"><![CDATA[<hr><p>代写完成–Java Socket: 多线程猜数字游戏</p><hr><h5 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h5><p>In this assignment, you are to develop a simple game played via the network.</p><a id="more"></a><h5 id="General-Specification"><a href="#General-Specification" class="headerlink" title="General Specification"></a>General Specification</h5><p>Your task is to implement a simple game with separate client and server machines. The player is sitting in front of the client machine (one player per client), and the server is administering the game. You have to implement the game in two stages.</p><p>Stage 1: Single-player game: one client communicates with the server. When you have completed stage one, save a copy of it for submission.</p><p>Stage 2: Multiplayer game: you need to modify the server so that it can handle several (up to six) clients simultaneously.</p><h5 id="The-game"><a href="#The-game" class="headerlink" title="The game"></a>The game</h5><p>It is a simple guessing game. The server generates a secret code - an X digit number (where X is a number from 3 to 8 determined by the client at the start of the game). The client’s task is to guess the combination. Each combo has only unique digits (no repeats). The client task is to guess the exact combination with the fewest number of guesses (up to a maximum of 10 guesses).</p><p>For each incorrect guess the client gets a clue in the form of two numbers:</p><ul><li><p>Correct Positions: number of digits in guess that are in the correct position</p></li><li><p>Incorrect Positions: number of digits in guess that occur in the code but are in an incorrect position</p></li></ul><p>If the client correctly guesses the code, the server announces the number of guesses made.</p><p>If the client fails to guess the code after 10 attempts, the server announces the code.</p><h5 id="Multiplayer-version"><a href="#Multiplayer-version" class="headerlink" title="Multiplayer version"></a>Multiplayer version</h5><p>The server maintains a lobby queue. Clients have to register with the server (using their first name) to be added to the lobby queue before they can play. Clients can register at any time.</p><p>The game is played in rounds. At the start of each round, the server takes the first three clients from the lobby (or all clients if there are less than three clients in the lobby), and starts the round.</p><p>First the server announces the number of participants. Then the player in the group that was first in the lobby queue gets to choose the number of digits in the code (X).</p><p>The server then generates a random code with X unique digits. The game then enters the guessing phase. Each player can guess at any time (with their number of guesses tracked by the server).</p><p>Once all players have either:</p><p>Correctly guessed the code, Reached their maximum guesses – 10, or Chosen to forfeit by pressing f (giving them a guess count of 11)</p><p>The server announces to all clients the number of guesses for each client (ranked from lowest to highest). Players can then choose to play again (p), or quit (q). The players that chose to play again are added back into the end of the lobby queue, and the process repeats with a new round.</p><p><em>The client</em></p><p>It connects to the server, signs up for each game round, (if player one, gets the code length X from client and sends to server), gets guesses (numbers) from the player (console) and forwards them to the server. It displays the server’s messages to the player.</p><p><em>The server</em></p><p>It maintains a lobby queue, accepts players’ (clients’) requests to sign up, and selects the players for each round.</p><p>It also manages the game. First it announces the number of players, receives (X) the number of digits in the code from the first player and generates a number with X unique digits. In the guessing phase, it takes guesses from players, compares it to the secret code and sends the 2 digits back to the player (Correct Positions and Incorrect Positions) while updating their guess count.</p><p>After all players have completed their game (by correctly guessing/reaching max guesses/choosing to forfeit), the server announces the final rankings based on number of guesses, and allows players to either play again by entering p or quit by entering q.</p><p><em>Logging</em></p><p>The server logs the events in the game in both single player and multiplayer cases. There will be two separate logs, one for gaming and one for communication. The separation of logs is for security reasons, those having access to the communication log will not be able to learn about the intricacies of the game and vice versa. Each log entry should contain the date and time, the client ID or remote socket address and the action performed (e.g. “Guess made” or “Data sent”).</p>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> Socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Junit test</title>
      <link href="/junit-test.html"/>
      <url>/junit-test.html</url>
      
        <content type="html"><![CDATA[<hr><p>代写完成–Junit 测试用例: Hangman游戏及测试用例编写</p><hr><p>给定Hangman的框架，补全代码并编写完整的测试用例具体需求文档找不着了，基本涵盖了Junit的基础用法</p><a id="more"></a><p><img src="/images/2019-06-01-00-15-20-022.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> Junit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Parking System</title>
      <link href="/parking-system.html"/>
      <url>/parking-system.html</url>
      
        <content type="html"><![CDATA[<hr><p>代写完成–Java GUI + JDBC 连接 Mysql: 停车场系统</p><hr><p>一个能让用户预定停车位的软件，系统能够存储，管理，控制用户和停车位数据</p><a id="more"></a><p><img src="/images/2019-05-31-23-52-14-858.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> GUI </tag>
            
            <tag> JDBC </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS canvas</title>
      <link href="/js-canvas.html"/>
      <url>/js-canvas.html</url>
      
        <content type="html"><![CDATA[<hr><p>代写完成–JS: canvas小游戏</p><hr><p>JS棋类游戏，绘制棋盘棋子，棋子可移动，人机可以对战。</p><a id="more"></a><p>游戏包含三个阶段： setup， play和end阶段</p><p>play阶段游戏是循环进行的，游戏在一个6*6的格上进行。用户控制红块，程序控制黑块，<br>以及在格子上不能移动的块。最多12个红块和12个黑块，每个块上有1-6的数字，其中最多有三个<br>红块标有数字1, 标有2,3,4,5的红块最多各有两个，标有数字6的红块最多有一个，黑块同样如此。</p><h4 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h4><p>游戏从setup阶段开始，并且setup阶段包含三个回合。在这个阶段，给定一个grid和一个按钮，<br>顺序操作，点击按钮可以进入下一个回合。在setup阶段，用户把红块黑块和不能移动的块放置在grid上<br>每个格最多只能放置一个块，并且每个格上如果放了块就不能再改变。</p><p>setup阶段的第一个回合，用户通过点击一个小格并按字母b放置任意数量的不可移动的块到grid上：<br>假如用户按的字母不是b，提示错误并且没有东西会被放置在格上<br>假如用户尝试改变已经存在的一个块，提示错误并不做任何改变</p><p>setup阶段的第二个回合，用户放置最多12个红块到grid上。用户通过点一个格并按字母1-6来完成一次<br>放置操作：<br>假如用户输入不是1-6，提示错误，忽略操作<br>假如用户尝试放置比数字出现次数限制更多的红块，提示错误，忽略操作<br>假如用户尝试放置多于12个红块，提示错误，忽略操作<br>假如用户尝试不放置任何红块就进入下一个回合，提示错误，并忽略操作<br>假如用户尝试改变已经存在的一个块，提示错误并不做任何改变</p><p>setup阶段的第三个回合，和第二个回合一致，改红块为黑块。<br>用户点击按钮进入下一个回合，这里需要保证grid上至少存在一个黑块和一个红块。</p><h4 id="play"><a href="#play" class="headerlink" title="play"></a>play</h4><p>play阶段，用户进入play阶段后，界面应该向用户展示如下信息：<br>格上的所有信息，状态信息（当前处于多少回合，红块的残余数，黑块的残余数），结束按钮</p><p>在play阶段，游戏也按回合进行，每个回合按用户操纵和电脑操作交互进行。每个回合开始的时候<br>回合数加一，并且状态信息更新</p><p>在每一个回合中，用户或者电脑尝试移动一个他们的块，可能存在用户或者电脑不存在任何可移动块<br>的情况，这应该在每次用户或者电脑的操作之前被判断，并且如果这种情况发生，游戏应该进入end阶段</p><p>用户操作的环节，用户点击一个块并且按方向键asdw控制网格上下左右移动一个格。<br>如果是用户按的是其他键，提示错误。<br>假如用户的移动操作会导致选择的块被移出边界，或者移动到一个不可移动的块占据的位置，或者<br>一个已经被红块占领了的位置，提示错误，用户可以重新选择移动操作。否则的话，这次移动是成功的，<br>如果目的格本身就是空的，直接移动，用户操作环节结束<br>如果目的格有一个黑块，并且红块的数字比目的格黑块的数字大（构成环，也就是说1 &gt; 6），<br>那么黑块消除，否则红块消除，状态信息更新</p><p>用户操作环节结束后进入电脑操作环节，</p><p>电脑操作环节与用户操作环节的规则一致，电脑选择一个可以移动的黑块并进行移动。<br>电脑移动之后，当前回合结束</p><p>play阶段一直继续，直到达到以下某个结束条件：<br>用户点击结束按钮主动结束游戏<br>grid上没有可以移动的红块（包含没有红块的情况）<br>grid上没有可以移动的黑块（包含没有黑块的情况）</p><h4 id="end"><a href="#end" class="headerlink" title="end"></a>end</h4><p>play阶段结束之后，游戏进入end阶段，end阶段判胜负，如果grid上没有黑块用户胜，<br>没有红块电脑胜，否则平局，蹦出提示信息，并且结束游戏，不再接收用户输入</p><p><img src="/images/2019-05-31-23-57-14-358.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eats system</title>
      <link href="/eats-system.html"/>
      <url>/eats-system.html</url>
      
        <content type="html"><![CDATA[<hr><p>代写完成–Java 命令行程序: 餐馆管理系统</p><hr><p>Monash University has asked your team to develop an application named Monash Eats typically for customers looking for restaurants on a budget. The application will contain the menu of the restaurants which may include special deals. A restaurant can offer other types of deals as well such as deal for kids.</p><p>Customers can register to create their accounts. A customer can order their food from any restaurant within their 30kms of the radius at a set cost. As a customer, you can pay by cash, coupons or divide the payments between cash and coupons. Once the food is delivered, the application will ask the customer to rate the restaurant and the food delivered.</p><a id="more"></a><p>Owners of the restaurant are required to add their menu into the application. Customers should be able to see name, description and price for each item. Once the restaurant has received the order, they are required to update the status to ‘preparing’ and update the remaining time of delivery. The restaurant will be responsible for delivering food.</p><p>After the payment, the customer should be able to view the receipt.</p><p>Monash University has budgeted only for text-based or GUI-based (no enterprise application!) application. However, you can program the application either in Java or Python.</p><p>The application includes but not limited to the following requirements:</p><p>A customer should be able to:</p><ul><li><p>log in</p></li><li><p>register</p></li><li><p>view menu of a restaurant</p></li><li><p>manage cart</p></li><li><p>order food</p></li><li><p>rate food delivered</p></li></ul><p>The administrator should be able to:</p><ul><li><p>Log in</p></li><li><p>Manage restaurants</p></li><li><p>Manage feedback</p></li><li><p>Remove registered accounts</p></li></ul><p>An owner of the restaurant should be able to:</p><ul><li><p>Log in</p></li><li><p>Manage Menus</p></li><li><p>Manage restaurants</p></li></ul><p>Monash University has appointed Application Partners (your tutors) for your client interview. During your client interview, you can discuss the specifications of the application in much detail. Keep in mind your client will be interested to see wireframes in few weeks, so make sure you have gathered all the information that is required at least for that stage.</p>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> Command line </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>quiz menu system</title>
      <link href="/quiz-menu-system.html"/>
      <url>/quiz-menu-system.html</url>
      
        <content type="html"><![CDATA[<hr><p>代写完成–Java命令行菜单程序：考试系统</p><hr><h4 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h4><p>As described in the handout for Part 1, the overall aim of the assignment is to develop a menu-driven program to administer a quiz test.</p><p>In Part 1, you have implemented the classes to represent the quiz questions and answers. You have also written programs to test these classes. In particular, you have written a program to read a number of questions from a text ﬁle, administer the questions, obtain the answers, and print out the answers.</p><a id="more"></a><p>Building on the work that you have done for Part 1, in this Part 2, you are required to do the tasks described below.</p><p>Besides the information given in the tasks below, please refer to Part 1 of the Assignment for any other information you may need.</p><h4 id="Task-1"><a href="#Task-1" class="headerlink" title="Task 1"></a>Task 1</h4><p>Modify the classes QuizQuestion and QuizAnswer and their subclasses to use ArrayList instead of array whenever you need to maintain a collection.</p><p>Test your classes with the provided BasicTester program.</p><h4 id="Task-2"><a href="#Task-2" class="headerlink" title="Task 2"></a>Task 2</h4><p>(For Tasks 2, 3 and 4, you must also use ArrayList whenever you need to maintain collections.)<br>This task does not required you to do any exception handling. (That will done in Tasks 3 and 4).<br>Write a menu program called QuizMenu. The program displays the menu with the options shown below:</p><pre class=" language-shell"><code class="language-shell">======== Options:======== R: Read question details from a text file A: Administer the quiz test F: Administer the quiz test with option to quit D: Display the answers on the screen W: Write the answers to a text file Q: QuitPlease select an option:</code></pre><p>Other than the minimum required for the program to compile, no exception handling is required for this task.</p><p><em>Option R</em>. The program asks for the name of the text ﬁle (e.g. qq.txt) and reads the questions from this ﬁle. The ﬁle name (to be entered) includes the ﬁle extension. The ﬁle format is exactly as described in Part 1.</p><p><em>Option A</em>. The way the program administers the quiz questions and obtains the answers is exactly as described in Part 1.</p><p><em>Option F</em>. (‘F’ stands for ‘Flexible administration of the quiz test’). With this option, after answering a quiz question, the user will be asked if he/she wants to continue or not. If the user chooses to quit early, options D and W are still available to display and save the results of the questions have been answered. The behavior of the program is illustrated with a sample run below:  </p><pre class=" language-shell"><code class="language-shell">======== Options:======== R: Read question details from a text file A: Administer the quiz test F: Administer the quiz test with option to quit D: Display the answers on the screen W: Write the answers to a text file Q: QuitPlease select an option: fQuestion 1 A try statement must have a catch block. True or false?Type true or false in lower case: true Do you want to continue? (y/n): yQuestion 2 FileNotFoundException is a/an _____ exception. Fill in the blank Type in your answer: checked Do you want to continue? (y/n): n======== Options:======== R: Read question details from a text file A: Administer the quiz test F: Administer the quiz test with option to quit D: Display the answers on the screen W: Write the answers to a text file Q: QuitPlease select an option:</code></pre><p><em>Option D</em>. The way the program displays the answer is illustrated by the example below:</p><pre class=" language-shell"><code class="language-shell">Question 1TrueFalseAnswer[quizQuestion: TrueFalseQuestion[question: A try statement must have a catch block., correctAnswer: false] , userAnswer: true, result: I]Question 2 WordAnswer[quizQuestion: WordQuestion[question: FileNotFoundException is a/an _____ exception. Fill in the blank., correctAnswer: checked, caseSensitive: false] , userAnswer: checked, result: C]Number of questions: 5 Number of answers: 2 Number of correct answers: 1Number of incorrect answers: 1</code></pre><p>As illustrated above, the display of the result of a quiz test ends with four lines of summary.</p><p><em>Option W</em>. The program asks for the name of the ﬁle to save the result to (e.g. result.txt). The information to be written and the format are exactly as for displaying the result on the screen.</p><p>Hints:</p><ul><li><p>For each menu option (except “quit”), you should have a method to carry out the required operation.</p></li><li><p>Test your program with both qq.txt and qqe.txt (which has a format error).</p></li></ul><h4 id="Task-3"><a href="#Task-3" class="headerlink" title="Task 3"></a>Task 3</h4><p>The menu-driven program of Task 2 can crash. For Task 3, you are required to enhance the program of Task 2 to prevent it from crashing.</p><p>More speciﬁcally, we want to achieve the following objective:</p><p>When the program carries out the operation required for a menu option, if some exceptional condition arises, the program will display a message to inform the user of the occurrence of the exception, terminate the operation and return to the main menu.</p><p>In this way, the program does not crash, and all the work up to that point (before the failed operation) is preserved and further operations can be taken.</p><p>Make a copy of the previous menu program and call it QuizMenuRobust.java. Modify it to make it robust as described above.</p><h4 id="Task-4"><a href="#Task-4" class="headerlink" title="Task 4"></a>Task 4</h4><p>We now seek to enhance the program of Task 3 to remove some of its shortcomings.</p><p>Examples of shortcomings of program QuizMenuRobust</p><p>It does not make sense to administer a quiz when it has not been read. So ideally, if the user tries to administer a quiz before it is read, the program should display an error message, and terminate the operation and return to the main menu.</p><p>This is not the behavior of program of Task 3. How it behaves depend on whether the list of question instances has been initialized to an empty list or not.</p><ul><li><p>If the list of answer objects has not been initialized, i.e. it is a null object, a message about null pointer exception is displayed before returning to the main menu.</p></li><li><p>If the list has been initialized to an empty ArrayList, the program returns immediately to the main menu because an empty list of questions has been administered.</p></li></ul><p>As another example, if you read the ﬁle qqe.txt, an exception occurs, and the program returns to the main menu. But a number of questions has been read, and the list has a number of question instances. You can see this by choosing option A next.</p><p>This behavior is generally not regarded as being satisfactory. Normally, if an operation like this fails, we would like to restore things to their states prior to the failed operation. (This is what rollback operation in database is about.)</p><p>The state of the menu-driven program</p><p>As mentioned before, if the user tries to administer a quiz before it is read, the program should display an error message, and terminate the operation and return to the main menu.</p><p>In order to make that sort of behavior possible, one solution is to regard the program as what is known as a state machine. By that, we mean we regard the program an entity that can go through a number of states and the state that it is in can aﬀect its behavior.</p><p>As a solution adequate for our purpose, we can regard the program as an entity that can be in one of three states represented by the three constants declared below:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> QUIZ_NOT_READ <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// A quiz has not been read or has not been read successfully.</span><span class="token comment" spellcheck="true">// When the program is in this state, there is not available</span><span class="token comment" spellcheck="true">// a list of quiz objects to be administered.</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> QUIZ_AVAILABLE <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// A quiz has been read and is available but it has not been</span><span class="token comment" spellcheck="true">// administered. When the program is in this state, there is not</span><span class="token comment" spellcheck="true">// a list of answer objects to be displayed or saved.</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> QUIZ_TAKEN <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// A quiz has been administered, and the answers are available</span><span class="token comment" spellcheck="true">// for displaying or saving to file</span><span class="token comment" spellcheck="true">// More information related to these states is given below</span></code></pre><p>Then we should have a variable – let us call it <code>state</code> – to keep track of the state that the program is in.</p><p>Initially, the state should be <code>QUIZ_NOT_READ</code>. When a quiz is successfully read in, the state should be <code>QUIZ_AVAILABLE</code>. When a quiz is successfully administered, completely or with early exit, the state should be <code>QUIZ_TAKEN</code>.</p><p>Enhancement features</p><p>Make a copy of QuizMenuRobust, change the name to QuizMenuEnhanced, and modify it to implement the enhancement features described below:</p><p><em>For option R (read questions)</em></p><p>E1 If the operation completes successfully, the state must be set to <code>QUIZ_AVAILABLE</code> E2 If the operation fails (and throws an exception),</p><ul><li><p>The list of question objects must be set to null</p></li><li><p>The state must be set to <code>QUIZ_NOT_READ</code></p></li></ul><p>E3 If the user chooses option R when the state is <code>QUIZ_AVAILABLE</code> or <code>QUIZ_TAKEN</code>,</p><ul><li><p>Ask the user if they really want to read a new quiz, and then proceed accordingly.</p></li><li><p>If the user conﬁrms that they want to proceed with reading in a new quiz, then we prepare a “clean sheet” ﬁrst with the following actions</p><ul><li>Set the state to <code>QUIZ_NOT_READ</code></li><li>Set the lists of question and answer objects to null before proceed to reading the questions.</li></ul></li></ul><p>NOTE: If the subsequent reading is completed successfully, the state must be set to <code>QUIZ_AVAILABE</code>. If the subsequent reading fails, the state must be <code>QUIZ_NOT_READ</code>. See E1 and E2 above.</p><p><em>For options A and F (administer the quiz)</em></p><p>E4 If the operation completes successfully, the state must be set to <code>QUIZ_TAKEN</code>. E5 If the operation fails,</p><ul><li><p>The list of answer objects must be set to null</p></li><li><p>the state must be <code>QUIZ_AVAILABE</code></p></li></ul><p>E6 If the user tries option A or F when the state is <code>QUIZ_NOT_READ</code>, display an error message, terminate the operation and return to the main menu.</p><p>E7 If the user tries to administer a quiz when the state is <code>QUIZ_TAKEN</code>,</p><ul><li><p>Ask the user if they really want to take the test again, and then proceed accordingly.</p></li><li><p>If the user conﬁrms that they want to proceed with this option, then</p><ul><li>The list of answer instances must be set to null</li><li>The state must be set to <code>QUIZ_AVAILABLE</code></li></ul></li></ul><p>NOTE: If the subsequent administering operation is completed successfully, the state must be set to <code>QUIZ_TAKEN</code>. If the operation fails, the state must be <code>QUIZ_AVAILABLE</code>. See E4 and E5.</p><p><em>For options D and W (display and save answers)</em></p><p>E8 If the user tries option D or W when the state is not <code>QUIZ_TAKEN</code>, display an error message, terminate the operation and return to the main menu.</p>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> Command line </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Café Dansa Database</title>
      <link href="/cafe-dansa-database.html"/>
      <url>/cafe-dansa-database.html</url>
      
        <content type="html"><![CDATA[<hr><p>代写完成–Java GUI + JDBC 连接 Mysql: 咖啡馆人员管理系统</p><hr><p>Your dance instructor has asked you to design a quick and easy program to keep track of the some pertinent data for the dancers at Café Dansa Club, an establishment offering classes in various styles of dancing. Currently no such program exists and it is difficult to update the information of the dancers.</p><p>Write a Java program that allows the user to manage a simple dancers’ database with ability to display, add, edit/modify, and delete the dancers who frequent the Café Dansa Club. Sample GUI is provided as one example of an implementation. There is a lot of flexibility however for your vision of how to design and implement this database, as long as your implementation has all of the required functionality.</p><a id="more"></a><p>Your program must contain/do:</p><ol><li><p>A Dancer class that contains in order at least name, dance preference style, proficiency, length of dancing, phone, and email. The class should also include a default and an overloaded constructor, accessors and mutators, toString() method, and equals() method.</p></li><li><p>Read and display the information about the dancer in a GUI-based driver. You cannot decide for yourself the back end: it must be relational DB such as SQL. An example of data with comma delimited text file that you must convert to a table to be mined with SQL statements might be:</p><pre class=" language-shell"><code class="language-shell">Anna,Pavlova,ballet,expert,32,425-125-9874,ana.pavlova@dance.comVaslav,Nijinsky,ballet,master,40,206-675-1280,nijinsky@ballet.netFred,Astaire,ballroom,master,360,310-387-4499,astaire@ballet.netSammy,Davis,tap,expert,27,909-123-6578,davis@pop.comGene,Kelly,ballroom,beginner,12,707-945-7765,kelly@ballroom.comMikhail,Baryshnikov,ballet,intermediate,,baryshnikov@ballet.comMichael,Jackson,modern pop,advanced,9,303-313-5455,michael@pop.comLuara,como Lino,samba,advanced,18,452-257-6733,nijinsky@ballet.comMagan,Gopal,salsa,intemediate,6,206-675-1280,gopal@salsa.comSukshinder Shinda,bhangra,beginner,2,661-038-9512,sshinda@bhangra.comMichael,Ryan Flatley,irish,intemediate,30,254-113-6457,flastley@irish.comRags,Sharqi,baladi,advanced,14,684-031-3210,rags.sharqi@baladi.comCherie,Magnus,milonga,beginner,5,206-675-1280,magus@milonga.comKahte,Culevski,balkan,advanced,8,321-741-3771,kculevski@balkanbeat.net</code></pre></li><li><p>Ability to add new dancers, modify existing ones, and delete dancers from the database.<br>Checks should be performed not to add duplicate entries of the same dancer, and that all of the required fields are valid and included when adding/editing a dancer.</p></li><li><p>A data structure of dancers to hold the members data. This should be an ArrayList.</p></li><li><p>Javadocs, description of the program, and comments.</p></li><li><p>Menus that synchronize with corresponding buttons and with at least the following menu choices:</p><ul><li>File with Clear, Print, and Exit menu items.</li><li>Sort with Sort by First Name, Last Name and by Years of experience menu items.</li><li>Action with Add, Delete, Edit (with choice to save or cancel changes) menu items, and Search by multiple fields: name, level, style, and years.</li><li>Help with an About menu item for a meaningful About form.</li></ul></li><li><p>The lab should start with an exciting Splash Screen (as a separate Thread) with progress bar that closes itself after so many seconds.</p></li><li><p>Well designed and efficient GUI with images and ease to use.</p></li><li><p>Print the information for a specified dancer (with the Print JButton) and print the entire form (from the File -&gt; Print selection).</p></li><li><p>Sepate forms (classes) for Adding and Editing a dancer that use a Validation class with regular expression for validating input into the forms.</p></li><li><p>Enable and disable JButtons and menu choices appropriately (so, for example, if the Edit JButton is pressed the others, including the corresponding menu choices and the JList, should be disabled until the editing is done).</p></li><li><p>You DB should contain at least three properly interconnected tables: Dancers, DanceStyles, and DanceLevels.</p></li><li><p>Optionally, consider adding images for each dancer and multimedia (video/audio of a sample dance style for each dance style).</p></li></ol><p>Screen Captures:<br><img src="/images/2019-05-31-22-00-22-877.png" alt><br><img src="/images/2019-05-31-22-00-32-341.png" alt><br><img src="/images/2019-05-31-22-00-40-054.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> GUI </tag>
            
            <tag> JDBC </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Using sockets to transfer ﬁles between client and server</title>
      <link href="/using-sockets-to-transfer-files-between-client-and-server.html"/>
      <url>/using-sockets-to-transfer-files-between-client-and-server.html</url>
      
        <content type="html"><![CDATA[<hr><p>代写完成–Java Socket 文件交换</p><hr><p>Write two applications, a server and a client, that transfer ﬁles between each other using sockets.</p><a id="more"></a><p>The server application should:</p><ul><li><p>Run continuously.</p></li><li><p>Use an Executor to manage a ﬁxed thread-pool with 10 connections.</p></li><li><p>Following a request by a client, query the local folder serverFiles and return a list of the ﬁles found there to the same client.</p></li><li><p>Send a ﬁle from serverFiles to a client that requests it.</p></li><li><p>Read a ﬁle from a client and place it in the serverFiles folder.</p></li><li><p>Log every request by a client in a local ﬁle log.txt with the format:</p></li></ul><p>date:time:client IP address:request.</p><p>The client application should:</p><ul><li><p>Accept one of the follow commands as command line arguments, and performs the stated task:</p><ul><li>list, which lists all of the ﬁles on the server’s folder serverFiles.</li><li>get fname, which requests the server send the ﬁle fname. This should then be read and saved to the client’s local folder clientFiles.</li><li>put fname, which sends the ﬁle fname from the client’s local folder clientFiles and sends it to the server (to be placed in serverFiles).</li></ul></li><li><p>Quits after completing each command.</p></li></ul><p>The listening port should be 8888. Your solution should work in principle for any ﬁles, not just those provided.</p><p>The communication protocol between the server and its clients is not speciﬁed. You are free to devise any protocol you wish, provided the above requirements are met.</p><p>For the purposes of this coursework both the client and the server should run on the same machine, i.e. with hostname localhost. They should not attempt to access each other’s disk space; all communication must be via sockets. UNIX ﬁlenames should be used.</p><p>Both applications should have basic error handling and your code should adhere to the Java coding standards.</p>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> Socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MenuManager - OOP and GUI</title>
      <link href="/menumanager-oop-and-gui.html"/>
      <url>/menumanager-oop-and-gui.html</url>
      
        <content type="html"><![CDATA[<hr><p>代写完成–Java GUI: 菜单管理系统</p><hr><p>We are continuing the MenuManager project by adding a class with methods to read information from a File plus inheritance and a Graphical User Interface (GUI) to our MenuManager project. </p><a id="more"></a><ol><li><p>*[5 points]* Do not create another project, work in your project [your pitt id]_MenuManager (from last homework). If you lost points for or had errors in that assignment, take care to fix them before moving on.</p></li><li><p>*[12 points]* Implement the FileManager class. Methods in this class are static and the class has no fields. We will not create objects of this class, but use its static methods. In UML diagrams, static methods (and static variables) are underlined. FileManager class has methods for reading and writing files.  See the figure below.<br><img src="/images/2019-05-31-19-46-22-810.png" alt></p></li></ol><ul><li>The following method<br>  <code>public static ArrayList&lt;MenuItem&gt; readItems(String fileName)</code><br>reads all types of dishes from a single file in which each line can be an appetizer, entree, side, or beer. The format of a line in file dishes.txt is<br>  <code>name of dish@@type of the dish@@description of the dish@@calories@@price</code><br>Where “type of the dish” is either “appetizer”, “entree”, “side”, or “beer” (Take a look to the file included dishes.txt). This “type of the dish” determines what kind of object to create, which class to use: Appetizer, Entree, Side, or Beer. Then the object is added to an ArrayList<menuitem>. Since all these classes extend MenuItem, objects of them can be “treated” generically as MenuItem objects. </menuitem></li><li>The method<br><code>public static void writeMenu( String fileName, ArrayList&lt;Menu&gt; menus )</code><br>writes a file (use String fileName parameter) with the information of all the menus in the ArrayList<menu> menus. You are free of choosing the format in which the data is written, but for each Menu in the ArrayList, all information should be included: name of the menu, name of each dish, description of each dish, calories and price of each dish, plus the sum of all calories, and the total price.</menu></li></ul><ol start="3"><li>*[18 points]* Class MenuItem is defined as the superclass for Appetizer, Entree, Side, and Beer (all these 4 classes extend MenuItem). As a result, the fields and getters/setters previously defined are moved to MenuItem. </li></ol><ul><li>See the following diagram. Implement the class MenuItem.<br><img src="/images/2019-05-31-19-48-51-174.png" alt></li><li>Make Appetizer, Entree, Side, and Beer classes extend MenuItem (as indicated in the figure) and remove from them all fields and Getters/Setters. The fields name, description, calories are now inherited. </li><li>Add the field price and the corresponding getter and setter in the class MenuItem. Now all other classes extending MenuItem also inherit price.</li><li>In all classes Appetizer, Entree, Side, and Beer make constructors to receive all field values and to call the super constructor.</li><li>Override toString() in MenuItem in order to return the name attribute.</li><li>Also, override toString() in class Menu (this class is defined in previous Assignment 4) in order to return the name of the menu.<br><img src="/images/2019-05-31-19-49-34-065.png" alt></li></ul><ol start="4"><li>*[15 points]* Implement the class MenuManager. A MenuManager object has an ArrayList of each of the type of dishes.</li></ol><ul><li><p>The constructor, as you can see in the following figure, receives a fileName. Read this file using the method readItems of the class FileManager and fill a single ArrayList of MenuItem. Now we need to separate the single ArrayList containing MenuItem objects into the four ArrayList of different types. To solve this, create the four ArrayList and implement a loop go through the single ArrayList<menuitem> and take every dish and put it in the right ArrayList. Hint: user instanceof operator. You can implement this task in a separate method and call it in the constructor. </menuitem></p></li><li><p>Implement the method randomMenu.  The method creates a Menu object taking randomly one appetizer, one entree, one side, and one beer. The name of the menu is passed in the parameter String name.</p></li><li><p>[Optional: extra credit] Methods minCaloriesMenu() and maxCaloriesMenu() generates the lowest and highest calories menus, respectively. To do the minimum, you have to pick the Entree with the lowest calorie value among entrees. Same for appetizer, side and beer. The method maxCaloriesMenu() do similarly, but selecting highest calories dishes. </p></li><li><p>Add getters and setters to all fields in MenuManager. </p></li></ul><ol start="5"><li>*[45 points]* Graphical User Interface. Build the following GUI.<br>FIGURE 1. Main window implemented in class MenuManagerGUI<br><img src="/images/2019-05-31-19-50-37-309.png" alt><br>FIGURE 2. Secondary window for displaying the details of a Menu, also implemented in MenuManagerGUI class<br><img src="/images/2019-05-31-19-50-54-244.png" alt></li></ol><ul><li>Create the class MenuManagerGUI containing all graphic components and a MenuManager object. Also contains a main(String[] args) method. </li><li>Declare ALL components (all JLabel, JFrame, JButton, JComboBox, JTextField, etc) as fields in MenuManagerGUI.</li><li>Make sure you declare a MenuManager object as a field of the MenuManagerGUI class. </li><li>The constructor of the class MenuManagerGUI should:<br>▪    Create the MenuManager object, which loads the data from the file.<br>▪    Initialize and place all graphic components<br>▪    Load the ArrayLists of MenuManager object into the comboboxes. In other words, fill the comboboxes in the main window with the ArrayList of appetizers, entrees, sides and beers that are contained in the class MenuManager.</li><li>The execution of the MenuManagerGUI.main method does the following:<br>▪    Creates a MenuManagerGUI object calling the constructor explained before<br>▪    Set the JFrame visible, so the main window appears</li><li>The main window in the GUI gives you four options to generate Menu objects. These four options correspond to the buttons:<br>▪    “Create Menu with these dishes” button take the selected elements in the four comboboxes and creates a menu. Just before creating the menu object, it asks the user to input a name for the menu. The newly created menu is added to the list at the side.<br>▪    “Generate a Random Menu”: this button asks the user to input a name for the new menu and then uses the method randomMenu in class MenuManager. The random menu generated is then added to the list in the right side.<br>▪    [Optional: extra credit] “Generate a Minimum Calories Menu”: similarly than the previous button but now using the method minCaloriesMenu() from MenuManager.<br>▪    [Optional: extra credit] “Generate a Maximum Calories Menu”: similarly than the previous button but now using the method maxCaloriesMenu() from MenuManager.</li><li>The list of the right side is where generated menus are placed. The list shows the menus by their names. For achieving this, make sure you override the method toString in class Menu.</li><li>The button Details (FIGURE 2) displays the secondary window filling all the fields contained there (all textfields and textareas) with the information of the selected Menu in the list of generated menus in the main window (right side in FIGURE 1). Note that the name of the menu selected is in the title of the Details window (FIGURE 2).  If no menu is selected in the list, then the secondary window is not shown.</li><li>The button “Delete all” removes all Menu elements from the list.</li><li>The button “Save to File” writes a file “data/menus.txt” with the whole data of the menus in the list. Use the method writeMenus from the FileManager class.</li><li>All text fields in the secondary window (FIGURE 2) are “read only”. This mean their values are filled by the program but the user cannot change them.</li></ul><ol start="6"><li>*[5 points]* Correct indentation, naming conventions, and style conventions.</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> GUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Self Introdcution</title>
      <link href="/self-introduction.html"/>
      <url>/self-introduction.html</url>
      
        <content type="html"><![CDATA[<hr><p>本人985研究生，有大厂工作经历，曾代写过几十个assignment，赢得一致好评<br>个人商户，量力接活，时间质量保证</p><hr><h5 id="个人优势"><a href="#个人优势" class="headerlink" title="个人优势"></a>个人优势</h5><ul><li>本人也是学生，能站在学生的角度思考问题，代码真实性更具说服力</li><li>个人开发者，省中介费用，支持支付宝/微信支付</li><li>人贵自知，本人会量力接活，如果接了我会保证按时按量完成，评估之后不能完成的从源头杜绝，我会请你另请高明</li><li>基本素质优良，秉承honor code原则</li><li>免费售后服务，但不支持新增需求</li></ul><h5 id="代写范围"><a href="#代写范围" class="headerlink" title="代写范围"></a>代写范围</h5><ol><li>Java（最擅长语言）</li></ol><ul><li>Java SE基础</li><li>Java Web: JSP/Servlet，Spring体系各类框架，Hibernate，Mybatis</li><li>Java桌面程序：awt，swing</li></ul><ol start="2"><li>数据库</li></ol><ul><li>最常用MySQL，可接应用类和纯SQL类</li><li>Redis也比较常用</li></ul><ol start="3"><li>Python（熟悉）</li></ol><ul><li>只做基础语法类型，人工智能领域不做</li></ul><ol start="4"><li>PHP（熟悉）</li></ol><ul><li>只做小网站，与MySQL结合，其余不做</li></ul><ol start="5"><li>JS（熟悉）</li></ol><ul><li>只写纯语法类型的</li></ul><h5 id="合作"><a href="#合作" class="headerlink" title="合作"></a>合作</h5><p>为了高效沟通，请直接发送附件到我的邮箱 <a href="Mailto:153692771@qq.com" target="_blank" rel="noopener">153692771@qq.com</a>，并麻花藤我：见左下角微信/QQ图标，如果你追求极致高效，请带价咨询</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
